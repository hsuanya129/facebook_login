{"version":3,"sources":["components/post.js","components/posts.js","components/login.js","App.js","serviceWorker.js","index.js"],"names":["Post","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","date_temp","Date","parse","data","created_time","date","react_default","a","createElement","className","from","name","message","picture","src","toString","React","Component","Posts","greeting","hint","map","item","post","key","id","Login","_this","state","posts_data","window","assertThisInitialized","fbAsyncInit","FB","init","appId","cookie","status","xfbml","version","getLoginStatus","response","api","setState","fields","feed","Event","subscribe","d","s","js","fjs","getElementsByTagName","getElementById","parentNode","insertBefore","document","scope","data-width","data-size","data-button-type","data-auto-logout-link","data-use-continue-as","posts","App","login","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.378de990.chunk.js","sourcesContent":["import React from 'react';\r\nimport './../App.css'\r\n\r\nclass Post extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n\r\n  render(){\r\n    const date_temp = Date.parse(this.props.data.created_time)\r\n    const date = new Date(date_temp)\r\n    \r\n    \r\n    return(\r\n      <div>\r\n        <p className=\"from\">{this.props.data.from.name}</p>\r\n        <div className=\"content\">\r\n          {this.props.data.message}\r\n          {(this.props.data.picture) ? <img src={this.props.data.picture}></img> : \"\"}\r\n        </div>\r\n        <p className=\"date\">{date.toString()}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Post;","import React from 'react';\r\nimport Post from './post'\r\n\r\nclass Posts extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n\r\n  render(){\r\n    var greeting\r\n    (this.props.hint === '') ? greeting=\"Login now! Email:aetsfmhjpu_1563950203@tfbnw.net/Password:22342467\" : greeting=\"Hello \"+this.props.hint\r\n\r\n    const data = this.props.data.map((item)=><Post key={item.id} data={item} />)\r\n    return(\r\n      <div>\r\n        <h1>{greeting}</h1>\r\n        {data}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Posts;","import React from 'react';\r\nimport FB from 'fb';\r\nimport '../App.css';\r\nimport Posts from './posts';\r\n\r\nclass Login extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            posts_data: [],\r\n            hint:'',\r\n        }\r\n        //To activate its methods from outside(window)\r\n        window.Login = this;\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        //Initialize\r\n        window.fbAsyncInit = function () {\r\n            window.FB.init({\r\n                appId: '2858794564190467',\r\n                cookie: true,\r\n                status: true,\r\n                xfbml: true,\r\n                version: 'v3.3'\r\n            });\r\n\r\n            //Called at the fb initialization, to check if user has login or not\r\n            window.FB.getLoginStatus(function (response) {\r\n                \r\n                if (response.status === 'connected') {\r\n                    window.FB.api('/me', function (response) {\r\n                        window.Login.setState({\r\n                            hint:response.name\r\n                        });\r\n                    });\r\n                    window.FB.api('/me','GET',{\"fields\":\"feed{picture,created_time,message,from}\"}, function (response) {\r\n                        window.Login.setState({\r\n                            posts_data: response.feed.data\r\n                        });\r\n                    });\r\n                } else {\r\n                    window.Login.setState({\r\n                        posts_data: [],\r\n                        hint:''\r\n                    });\r\n                }\r\n            });\r\n\r\n            //EventListener to check user login or logout, TODO: try to seperate repeated code into an independent function\r\n            //Because login button can't call 'onlogin' in react\r\n            window.FB.Event.subscribe('auth.statusChange', function (response) {\r\n                if (response.status === 'connected') {\r\n                    window.FB.api('/me', function (response) {\r\n                        window.Login.setState({\r\n                            hint:response.name\r\n                        });\r\n                    });\r\n                    window.FB.api('/me','GET',{\"fields\":\"feed{picture,created_time,message,from}\"}, function (response) {\r\n                        window.Login.setState({\r\n                            posts_data: response.feed.data\r\n                        });\r\n                        \r\n                    });\r\n                } else {\r\n                    window.Login.setState({\r\n                        posts_data: [],\r\n                        hint:''\r\n                    });\r\n                }\r\n            })\r\n        };\r\n\r\n        //Part of initializaion of fb\r\n        (function (d, s, id) {\r\n            var js, fjs = d.getElementsByTagName(s)[0];\r\n            if (d.getElementById(id)) { return; }\r\n            js = d.createElement(s); js.id = id;\r\n            js.src = \"https://connect.facebook.net/zh_TW/sdk.js#xfbml=1&version=v3.3&appId=2858794564190467&autoLogAppEvents=1\";\r\n            fjs.parentNode.insertBefore(js, fjs);\r\n        }(document, 'script', 'facebook-jssdk'));\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div\r\n                    className=\"fb-login-button\"\r\n                    scope=\"public_profile,email,user_posts\"\r\n                    data-width=\"\"\r\n                    data-size=\"large\"\r\n                    data-button-type=\"login_with\"\r\n                    data-auto-logout-link=\"true\"\r\n                    data-use-continue-as=\"true\">\r\n                </div>\r\n                <Posts data={this.state.posts_data} hint={this.state.hint} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Login;","import React from 'react';\r\nimport './App.css';\r\nimport Login from './components/login'\r\nimport Posts from './components/posts'\r\n\r\nclass App extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n\r\n  render(){\r\n    \r\n    return(\r\n      <div className='App'>\r\n        <Login />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}