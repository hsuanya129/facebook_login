{"version":3,"sources":["components/post.js","components/posts.js","components/login.js","App.js","serviceWorker.js","index.js"],"names":["Post","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","date_temp","Date","parse","data","created_time","date","formatContent","message","replace","react_default","a","createElement","className","from","name","full_picture","src","toString","React","Component","Posts","_this","reRequest","window","FB","login","response","reGrant","scope","auth_type","greeting","btn","auth","user_name","permission","onClick","map","item","post","key","id","Login","fetchPosts","setState","status","api","find","fields","posts","feed","posts_data","state","_this2","fbAsyncInit","init","appId","cookie","xfbml","version","getLoginStatus","Event","subscribe","d","s","js","fjs","getElementsByTagName","getElementById","parentNode","insertBefore","document","data-scope","data-width","data-size","data-button-type","data-auto-logout-link","data-use-continue-as","App","Boolean","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3e963dab.chunk.js","sourcesContent":["import React from 'react';\r\nimport './../App.css'\r\n\r\nclass Post extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n\r\n  render(){\r\n    const date_temp = Date.parse(this.props.data.created_time);\r\n    const date = new Date(date_temp);\r\n    const formatContent =(this.props.data.message) ? this.props.data.message.replace(/â†µ/, '<br/>') :\"\";\r\n    \r\n    return(\r\n      <div>\r\n        <p className=\"from\">{(this.props.data.from) ? this.props.data.from.name : \"By friend\"}</p>\r\n        <pre className=\"content\">\r\n          {formatContent}\r\n          <br/>\r\n          {(this.props.data.full_picture) ? <img className=\"full_picture\" src={this.props.data.full_picture}></img> : \"\"}\r\n        </pre>\r\n        <p className=\"date\">{date.toString()}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Post;","import React from 'react';\r\nimport Post from './post'\r\n\r\nclass Posts extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  //fired when user didn't agree the permission of user_posts, and clicked rerequest button \r\n  reRequest = () => {\r\n    window.FB.login((response) => {\r\n      this.props.reGrant(response);\r\n    }, {\r\n      scope: 'user_posts',\r\n      auth_type: 'rerequest'\r\n      });\r\n\r\n  }\r\n\r\n  render() {\r\n    let greeting;\r\n    let data;\r\n    let btn;\r\n\r\n    if (this.props.auth === 'connected') {\r\n      greeting = \"Hello \" + this.props.user_name;\r\n      if (this.props.permission === 'declined') {\r\n\r\n        btn = <button onClick={this.reRequest}>Rerequest</button>\r\n        data = `You have to grant us permission for posts first, click the button below to continue`;\r\n      } else if (this.props.data === 'no posts') {\r\n        data = \"You haven't posted anything yet.\";\r\n      } else {\r\n        data = this.props.data.map((item) => <Post key={item.id} data={item} />);\r\n      }\r\n    } else if (this.props.auth === 'unknown') {\r\n      data = <pre> {`Login now! Email:aetsfmhjpu_1563950203@tfbnw.net/Password:22342467 \\n without auth:not_wsoriwe_karen@tfbnw.net \\n without permission:no_huivpgp_abigail@tfbnw.net`}</pre>\r\n    } else if (this.props.auth === 'not_authorized') {\r\n      data = \"Not authorized yet! Please hit the login button and continue with your account\";\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <h1>{greeting}</h1>\r\n        <div>{data}</div>\r\n        {btn}\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Posts;","import React from 'react';\r\nimport '../App.css';\r\nimport Posts from './posts';\r\n\r\n\r\nclass Login extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            posts_data: [],\r\n            user_name: '',\r\n            auth: '', //authentication of app using Facebook login\r\n            permission: '' //data access to user_posts\r\n        };\r\n    }\r\n\r\n\r\n    \r\n    //Detect if connected or not, and save data of posts into this.state\r\n    fetchPosts = (response) => {\r\n        this.setState({\r\n            auth: response.status\r\n        });\r\n\r\n        if (response.status === 'connected') {\r\n\r\n            window.FB.api(`/me`, (response) => {\r\n                this.setState({\r\n                    user_name: response.name\r\n                });\r\n            });\r\n\r\n            window.FB.api('/me/permissions', 'GET', (response) => {\r\n                let permission = response.data.find((item) => item.permission === 'user_posts').status;\r\n                this.setState({\r\n                    permission\r\n                });\r\n\r\n                if (permission === 'declined') {\r\n                    return;\r\n                } else {\r\n                    window.FB.api(`/me`, 'GET', { \"fields\": \"feed{full_picture,created_time,message,from}\" }, (response) => {\r\n                        let posts;\r\n                        (response.feed) ? posts = response.feed.data : posts = \"no posts\";\r\n                        this.setState({\r\n                            posts_data: posts\r\n                        });\r\n                    });\r\n                }\r\n            });\r\n\r\n            //for authentication equals unknown or not_authorized\r\n        } else {\r\n            this.setState({\r\n                posts_data: [],\r\n                user_name: ''\r\n            });\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        //Initialize\r\n        window.fbAsyncInit = () => {\r\n            window.FB.init({\r\n                appId: '2858794564190467',\r\n                cookie: true,\r\n                status: true,\r\n                xfbml: true,\r\n                version: 'v3.3'\r\n            });\r\n\r\n            //Called at the fb initialization, to check if user has login or not\r\n            window.FB.getLoginStatus((response) => { //Using arrowfunction to bind 'this' with component\r\n                this.fetchPosts(response);\r\n            });\r\n\r\n            //EventListener to check user login or logout,\r\n            //Because login button can't call 'onlogin' in react\r\n            window.FB.Event.subscribe('auth.statusChange', (response) => {\r\n                this.fetchPosts(response);\r\n            });\r\n        };\r\n\r\n        //Part of initializaion of fb\r\n        (function (d, s, id) {\r\n            var js, fjs = d.getElementsByTagName(s)[0];\r\n            if (d.getElementById(id)) { return; }\r\n            js = d.createElement(s); js.id = id;\r\n            js.src = \"https://connect.facebook.net/zh_TW/sdk.js\";\r\n            fjs.parentNode.insertBefore(js, fjs);\r\n\r\n        }(document, 'script', 'facebook-jssdk'));\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div\r\n                    className=\"fb-login-button\"\r\n                    data-scope=\"public_profile,email,user_posts\"\r\n                    data-width=\"\"\r\n                    data-size=\"large\"\r\n                    data-button-type=\"login_with\"\r\n                    data-auto-logout-link=\"true\"\r\n                    data-use-continue-as=\"true\">\r\n                </div>\r\n                <Posts data={this.state.posts_data} user_name={this.state.user_name} auth={this.state.auth} permission={this.state.permission} reGrant={this.fetchPosts}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default Login;","import React from 'react';\r\nimport './App.css';\r\nimport Login from './components/login'\r\n\r\nclass App extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n  }\r\n\r\n  render(){\r\n    \r\n    return(\r\n      <div className='App'>\r\n        <Login />\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}